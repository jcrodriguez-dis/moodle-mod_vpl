{"version":3,"file":"vplvnc.min.js","sources":["../src/vplvnc.js"],"sourcesContent":["// This file is part of VPL for Moodle - http://vpl.dis.ulpgc.es/\n//\n// VPL for Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// VPL for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with VPL for Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * VNC client control\n *\n * @copyright 2014 Juan Carlos Rodríguez-del-Pino\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author Juan Carlos Rodríguez-del-Pino <jcrodriguez@dis.ulpgc.es>\n */\n\n/* glob als RFB */\n/* glob als Util */\n\nimport $ from 'jquery';\nimport {VPLUtil} from 'mod_vpl/vplutil';\nimport {VPLUI} from 'mod_vpl/vplui';\nimport {VPLClipboard} from 'mod_vpl/vplclipboard';\nimport console from 'core/log';\n\nexport class VPLVNCClient {\n    constructor(VNCDialogId, str) {\n        var self = this;\n        var rfb;\n        var title = '';\n        var message = '';\n        var lastState = '';\n        var VNCDialog = $('#' + VNCDialogId);\n        var canvas = $('#' + VNCDialogId + \" div\");\n        var onCloseAction = VPLUtil.doNothing;\n        var clipboard;\n        var needResize = true;\n        var titleText;\n        /**\n         * Event handler of paste button at clipboard.\n         */\n        function pasteClipboard() {\n            if (self.isConnected()) {\n                rfb.clipboardPasteFrom(clipboard.getEntry2());\n            }\n        }\n        /**\n         * Event handler of paste button at clipboard.\n         *\n         * @param {object} rfb vnc client object\n         * @param {string} text Text received\n         */\n        function receiveClipboard(rfb, text) {\n            clipboard.setEntry1(text);\n        }\n        /**\n         * Event handler of clipboard button.\n         */\n        function openClipboard() {\n            clipboard.show();\n        }\n        /**\n         * Inform rfb of focus received.\n         */\n        function getFocus() {\n            if (self.isConnected()) {\n                //rfb.get_keyboard().set_focused(true);\n            }\n        }\n        /**\n         * Inform rfb of focus lost.\n         */\n        function lostFocus() {\n            if (self.isConnected()) {\n                //rfb.get_keyboard().set_focused(false);\n            }\n        }\n        /**\n         * Tries to do a copy.\n         */\n        function copyAction() {\n            clipboard.setEntry1(clipboard.getEntry1());\n            document.execCommand('copy');\n        }\n        var HTMLUpdateClipboard = VPLUI.genIcon('copy', 'sw') + ' ' + str('copy');\n        var HTMLPaste = VPLUI.genIcon('paste', 'sw') + ' ' + str('paste');\n        clipboard = new VPLClipboard('vpl_dialog_vnc_clipboard', HTMLUpdateClipboard, copyAction, HTMLPaste, pasteClipboard,\n            lostFocus);\n        canvas.on('click', function (e) {\n            if (e.target == canvas[0]) {\n                getFocus();\n            } else {\n                lostFocus();\n            }\n        });\n        this.displayResize = function () {\n            if (self.isConnected()) {\n                var w = VNCDialog.width();\n                var h = VNCDialog.height();\n                self.setCanvasSize(w, h);\n                //rfb.get_display().viewportChange(0, 0, w, h);\n            }\n        };\n        /**\n         * Event handler that limit the size of the vnc client windows.\n         *\n         */\n        function controlDialogSize() {\n            // Resize if dialog is large than screen.\n            var bw = $('html').width();\n            var bh = $(window).height();\n            if (VNCDialog.width() > bw) {\n                needResize = true;\n                VNCDialog.dialog(\"option\", \"width\", bw);\n            }\n            if (VNCDialog.parent().height() > bh) {\n                needResize = true;\n                VNCDialog.dialog(\"option\", \"height\", bh - VNCDialog.prev().outerHeight());\n            }\n        }\n        VNCDialog.dialog({\n            closeOnEscape: false,\n            autoOpen: false,\n            modal: true,\n            width: 'auto',\n            height: 'auto',\n            classes: {\n                \"ui-dialog\": 'vpl_ide vpl_vnc',\n            },\n            create: function () {\n                titleText = VPLUI.setTitleBar(VNCDialog, 'vnc', 'graphic', ['clipboard', 'keyboard'], [openClipboard]);\n            },\n            dragStop: controlDialogSize,\n            focus: getFocus,\n            open: controlDialogSize,\n            beforeClose: function () {\n                if (needResize) {\n                    var w = VNCDialog.width();\n                    var h = VNCDialog.height();\n                    needResize = false;\n                    self.setCanvasSize(w, h);\n                }\n            },\n            close: function () {\n                self.disconnect();\n            },\n            resizeStop: function () {\n                controlDialogSize();\n                needResize = true;\n            }\n        });\n\n        VNCDialog.css(\"padding\", \"1px\");\n        VNCDialog.parent().css('z-index', 2000);\n\n        this.updateTitle = function () {\n            var text = title;\n            if (message !== '') {\n                text += ' (' + message + ')';\n            }\n            titleText.text(str('console') + \": \" + text);\n        };\n        this.setTitle = function (t) {\n            title = t;\n            this.updateTitle();\n        };\n        this.setMessage = function (t) {\n            message = t;\n            this.updateTitle();\n        };\n        /**\n         * Event handler for the VNC connection established.\n         * @param {*} event\n         */\n        function connectHandler(event) {\n            updateState('normal', event);\n        }\n        /**\n         * Event handler for the VNC connection closed.\n         * @param {*} event\n         */\n        function disconnectHandler(event) {\n            updateState('disconnect', event);\n        }\n        /**\n         * Event handler for the VNC server verification.\n         * @param {*} event\n         */\n        function serververificationHandler(event) {\n            VPLUtil.log('VNC server verification ' + event.detail.status);\n        }\n        /**\n         * Event handler for the VNC credentials required.\n         * @param {*} event\n         */\n        function credentialsrequiredHandler(event) {\n            VPLUtil.log('VNC credentials required ' + event.detail.status);\n        }\n        /**\n         * Event handler for the VNC security failure.\n         * @param {*} event\n         */\n        function securityfailureHandler(event) {\n            updateState('failed', event);\n            VPLUtil.log('VNC security failure ' + event.detail.status);\n        }\n        /**\n         * Event handler for the VNC clipping viewport.\n         * @param {*} event\n         */\n        function clippingviewportHandler(event) {\n            VPLUtil.log('VNC clipping viewport ' + event.detail.status);\n        }\n        /**\n         * Event handler for the VNC capabilities.\n         * @param {*} event\n         */\n        function capabilitiesHandler(event) {\n            VPLUtil.log('VNC capabilities ' + event.detail.status);\n        }\n        /**\n         * Event handler for the VNC desktop name.\n         * @param {*} event\n         */\n        function desktopnameHandler(event) {\n            VPLUtil.log('VNC desktop name ' + event.detail.status);\n            self.setTitle(event.detail.name);\n        }\n\n        /**\n         * Event handler to show vnc client state in windows title.\n         *\n         * @param {string} newstate Name of the new state\n         * @param {Event} event Event that produce the state change\n         */\n        function updateState(newstate, event) {\n            switch (newstate) {\n                case \"normal\":\n                    lastState = 'normal';\n                    self.setMessage('');\n                    self.setTitle(str('connected'));\n                    break;\n                case \"disconnect\":\n                case \"disconnected\":\n                    lastState = 'disconnected';\n                    self.setTitle(str('connection_closed'));\n                    break;\n                case \"failed\":\n                    lastState = 'disconnected';\n                    self.setTitle(str('connection_fail'));\n                    console.log(\"VNC client: \" + event.detail.status);\n                    break;\n                default:\n                    self.setMessage('');\n                    self.setTitle(str('connecting'));\n            }\n        }\n\n        this.connect = function (secure, host, port, password, path, onClose) {\n            VPLUtil.loadModule('noVNC/core/rfb', 'RFB')\n                .then(function (RFB) {\n                if (!port) {\n                    port = secure ? 443 : 80;\n                }\n                clipboard.setEntry1('');\n                onCloseAction = onClose;\n                if (rfb) {\n                    rfb.disconnect();\n                    rfb = null;\n                }\n                canvas.html('');\n                self.show();\n                var target = canvas[0];\n                var url = (secure ? 'wss' : 'ws') + '://' + host + ':' + port + '/' +path;\n                rfb = new RFB(target, url, {\n                        'encrypt': secure,\n                        'repeaterID': '',\n                        'true_color': true,\n                        'local_cursor': true,\n                        'shared': false,\n                        'view_only': false,\n                        'credentials': { 'password': password }\n                    });\n                rfb.addEventListener(\"connect\", connectHandler);\n                rfb.addEventListener(\"disconnect\", disconnectHandler);\n                rfb.addEventListener(\"serververification\", serververificationHandler);\n                rfb.addEventListener(\"credentialsrequired\", credentialsrequiredHandler);\n                rfb.addEventListener(\"securityfailure\", securityfailureHandler);\n                rfb.addEventListener(\"clippingviewport\", clippingviewportHandler);\n                rfb.addEventListener(\"capabilities\", capabilitiesHandler);\n                rfb.addEventListener(\"clipboard\", receiveClipboard);\n                rfb.addEventListener(\"bell\", () => {console.log('\\x07Bell received');});\n                rfb.addEventListener(\"desktopname\", desktopnameHandler);\n                rfb.clipViewport = true;\n                rfb.scaleViewport = false;\n                rfb.resizeSession = true;\n                //b.qualityLevel = parseInt(getSetting('quality'));\n                //b.compressionLevel = parseInt(getSetting('compression'));\n                rfb.showDotCursor = true;\n            }).catch(function (error) {\n                console.error('Failed to load RFB module:', error);\n                self.setTitle(str('connection_fail'));\n                self.show();\n            });\n        };\n        this.isOpen = function () {\n            return VNCDialog.dialog(\"isOpen\");\n        };\n        this.close = function () {\n            VNCDialog.dialog(\"close\");\n        };\n        this.isConnected = function () {\n            return rfb && lastState != 'disconnected';\n        };\n        this.disconnect = function () {\n            if (rfb) {\n                rfb.disconnect();\n            }\n            onCloseAction();\n            clipboard.hide();\n        };\n        /**\n         * Round a number to event and not less than 100.\n         *\n         * @param {number} v value to round\n         *\n         * @returns {int}\n         */\n        function round(v) {\n            if (v < 100) {\n                v = 100;\n            }\n            return Math.floor(v / 2) * 2;\n        }\n        this.getCanvasSize = function () {\n            return canvas.width() + \"x\" + canvas.height();\n        };\n\n        this.setCanvasSize = function (w, h) {\n            canvas.width(round(w));\n            canvas.height(round(h));\n        };\n        this.show = function () {\n            VNCDialog.dialog('open');\n            VNCDialog.width('auto');\n            VNCDialog.height('auto');\n        };\n        self.setCanvasSize($(window).width() - 150, $(window).height() - 150);\n    }\n}\n"],"names":["constructor","VNCDialogId","str","rfb","clipboard","titleText","self","this","title","message","lastState","VNCDialog","canvas","onCloseAction","VPLUtil","doNothing","needResize","receiveClipboard","text","setEntry1","openClipboard","show","getFocus","isConnected","lostFocus","HTMLUpdateClipboard","VPLUI","genIcon","HTMLPaste","controlDialogSize","bw","width","bh","window","height","dialog","parent","prev","outerHeight","connectHandler","event","updateState","disconnectHandler","serververificationHandler","log","detail","status","credentialsrequiredHandler","securityfailureHandler","clippingviewportHandler","capabilitiesHandler","desktopnameHandler","setTitle","name","newstate","setMessage","round","v","Math","floor","VPLClipboard","getEntry1","document","execCommand","clipboardPasteFrom","getEntry2","on","e","target","displayResize","w","h","setCanvasSize","closeOnEscape","autoOpen","modal","classes","create","setTitleBar","dragStop","focus","open","beforeClose","close","disconnect","resizeStop","css","updateTitle","t","connect","secure","host","port","password","path","onClose","loadModule","then","RFB","html","addEventListener","clipViewport","scaleViewport","resizeSession","showDotCursor","catch","error","isOpen","hide","getCanvasSize"],"mappings":"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"}