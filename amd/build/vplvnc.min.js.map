{"version":3,"file":"vplvnc.min.js","sources":["../src/vplvnc.js"],"sourcesContent":["// This file is part of VPL for Moodle - http://vpl.dis.ulpgc.es/\n//\n// VPL for Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// VPL for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with VPL for Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * VNC client control\n *\n * @copyright 2014 Juan Carlos Rodríguez-del-Pino\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author Juan Carlos Rodríguez-del-Pino <jcrodriguez@dis.ulpgc.es>\n */\n\n/* globals RFB */\n/* globals Util */\n\nimport $ from 'jquery';\nimport {VPLUtil} from 'mod_vpl/vplutil';\nimport {VPLUI} from 'mod_vpl/vplui';\nimport {VPLClipboard} from 'mod_vpl/vplclipboard';\nimport console from 'core/log';\n\nexport class VPLVNCClient {\n    constructor(VNCDialogId, str) {\n        window.INCLUDE_URI = VPLUtil.options.scriptPath + \"/noVNC/include/\";\n        if (typeof Util == 'undefined') {\n            VPLUtil.loadScript(['/noVNC/include/util.js'],\n                function () {\n                    VPLUtil.log('/noVNC/include/util.js loaded', true);\n                    Util.load_scripts([\"webutil.js\", \"base64.js\", \"websock.js\", \"des.js\",\n                        \"keysymdef.js\", \"keyboard.js\", \"input.js\", \"display.js\",\n                        \"jsunzip.js\", \"rfb.js\", \"keysym.js\"]);\n                }\n            );\n        }\n        var self = this;\n        var rfb;\n        var title = '';\n        var message = '';\n        var lastState = '';\n        var VNCDialog = $('#' + VNCDialogId);\n        var canvas = $('#' + VNCDialogId + \" canvas\");\n        var onCloseAction = VPLUtil.doNothing;\n        var clipboard;\n        var needResize = true;\n        var titleText;\n        var inputarea = window.document.createElement('input');\n        inputarea.style.position = 'absolute';\n        inputarea.style.left = '0px';\n        inputarea.style.top = '-10000px';\n        inputarea.style.width = '1em';\n        inputarea.style.height = '1ex';\n        inputarea.style.opacity = '0';\n        inputarea.style.backgroundColor = 'transparent';\n        inputarea.style.borderStyle = 'none';\n        inputarea.style.outlineStyle = 'none';\n        inputarea.autocapitalize = 'off';\n        inputarea.autocomplete = 'off';\n        inputarea.autocorrect = 'off';\n        inputarea.wrap = 'off';\n        inputarea.spellcheck = 'false';\n        VNCDialog.append(inputarea);\n        /**\n         * Event handler of keyboard button.\n         */\n        function keyboardButton() {\n            if ($(inputarea).is(':focus')) {\n                inputarea.blur();\n            } else {\n                inputarea.focus();\n            }\n        }\n        /**\n         * Event handler of paste button at clipboard.\n         */\n        function pasteClipboard() {\n            if (self.isConnected()) {\n                rfb.clipboardPasteFrom(clipboard.getEntry2());\n            }\n        }\n        /**\n         * Event handler of paste button at clipboard.\n         *\n         * @param {object} rfb vnc client object\n         * @param {string} text Text received\n         */\n        function receiveClipboard(rfb, text) {\n            clipboard.setEntry1(text);\n        }\n        /**\n         * Event handler of clipboard button.\n         */\n        function openClipboard() {\n            clipboard.show();\n        }\n        /**\n         * Inform rfb of focus received.\n         */\n        function getFocus() {\n            if (self.isConnected()) {\n                rfb.get_keyboard().set_focused(true);\n            }\n        }\n        /**\n         * Inform rfb of focus lost.\n         */\n        function lostFocus() {\n            if (self.isConnected()) {\n                rfb.get_keyboard().set_focused(false);\n            }\n        }\n        /**\n         * Tries to do a copy.\n         */\n        function copyAction() {\n            clipboard.setEntry1(clipboard.getEntry1());\n            document.execCommand('copy');\n        }\n        var HTMLUpdateClipboard = VPLUI.genIcon('copy', 'sw') + ' ' + str('copy');\n        var HTMLPaste = VPLUI.genIcon('paste', 'sw') + ' ' + str('paste');\n        clipboard = new VPLClipboard('vpl_dialog_vnc_clipboard', HTMLUpdateClipboard, copyAction, HTMLPaste, pasteClipboard,\n            lostFocus);\n        canvas.on('click', function (e) {\n            if (e.target == canvas[0]) {\n                getFocus();\n            } else {\n                lostFocus();\n            }\n        });\n        this.displayResize = function () {\n            if (self.isConnected()) {\n                var w = VNCDialog.width();\n                var h = VNCDialog.height();\n                self.setCanvasSize(w, h);\n                rfb.get_display().viewportChange(0, 0, w, h);\n            }\n        };\n        /**\n         * Event handler that limit the size of the vnc client windows.\n         *\n         */\n        function controlDialogSize() {\n            // Resize if dialog is large than screen.\n            var bw = $('html').width();\n            var bh = $(window).height();\n            if (VNCDialog.width() > bw) {\n                needResize = true;\n                VNCDialog.dialog(\"option\", \"width\", bw);\n            }\n            if (VNCDialog.parent().height() > bh) {\n                needResize = true;\n                VNCDialog.dialog(\"option\", \"height\", bh - VNCDialog.prev().outerHeight());\n            }\n        }\n        VNCDialog.dialog({\n            closeOnEscape: false,\n            autoOpen: false,\n            modal: true,\n            width: 'auto',\n            height: 'auto',\n            classes: {\n                \"ui-dialog\": 'vpl_ide vpl_vnc',\n            },\n            create: function () {\n                titleText = VPLUI.setTitleBar(VNCDialog, 'vnc', 'graphic', ['clipboard', 'keyboard'], [openClipboard,\n                    keyboardButton]);\n            },\n            dragStop: controlDialogSize,\n            focus: getFocus,\n            open: controlDialogSize,\n            beforeClose: function () {\n                if (needResize) {\n                    var w = VNCDialog.width();\n                    var h = VNCDialog.height();\n                    needResize = false;\n                    self.setCanvasSize(w, h);\n                }\n            },\n            close: function () {\n                self.disconnect();\n            },\n            resizeStop: function () {\n                controlDialogSize();\n                needResize = true;\n            }\n        });\n        VNCDialog.css(\"padding\", \"1px\");\n        VNCDialog.parent().css('z-index', 2000);\n        this.updateTitle = function () {\n            var text = title;\n            if (message !== '') {\n                text += ' (' + message + ')';\n            }\n            titleText.text(str('console') + \": \" + text);\n        };\n        this.setTitle = function (t) {\n            title = t;\n            this.updateTitle();\n        };\n        this.setMessage = function (t) {\n            message = t;\n            this.updateTitle();\n        };\n        /**\n         * Event handler to show vnc client state in windows title.\n         *\n         * @param {object} rfb vnc client\n         * @param {string} state Name of the state\n         * @param {string} oldstate Name of the old state. Not used\n         * @param {string} msg State detail message\n         */\n        function updateState(rfb, state, oldstate, msg) {\n            lastState = state;\n            switch (state) {\n                case \"normal\":\n                    self.setMessage('');\n                    self.setTitle(str('connected'));\n                    break;\n                case \"disconnect\":\n                case \"disconnected\":\n                    self.setTitle(str('connection_closed'));\n                    break;\n                case \"failed\":\n                    self.setTitle(str('connection_fail'));\n                    console.log(\"VNC client: \" + msg);\n                    break;\n                default:\n                    self.setMessage('');\n                    self.setTitle(str('connecting'));\n            }\n        }\n\n        this.connect = function (secure, host, port, password, path, onClose) {\n            clipboard.setEntry1('');\n            onCloseAction = onClose;\n            self.show();\n            var target = $('#' + VNCDialogId + \" canvas\")[0];\n            if (!rfb) {\n                rfb = new RFB({\n                    'target': target,\n                    'encrypt': secure,\n                    'repeaterID': '',\n                    'true_color': true,\n                    'local_cursor': true,\n                    'shared': false,\n                    'view_only': false,\n                    'onUpdateState': updateState,\n                    'onPasswordRequired': null,\n                    'onClipboard': receiveClipboard\n                });\n                rfb.set_local_cursor(rfb.get_display().get_cursor_uri());\n            }\n            if (!port) {\n                port = secure ? 443 : 80;\n            }\n            rfb.connect(host, port, password, path);\n        };\n        this.isOpen = function () {\n            return VNCDialog.dialog(\"isOpen\");\n        };\n        this.close = function () {\n            VNCDialog.dialog(\"close\");\n        };\n        this.isConnected = function () {\n            return rfb && lastState != 'disconnected';\n        };\n        this.disconnect = function () {\n            if (rfb) {\n                rfb.disconnect();\n            }\n            onCloseAction();\n            clipboard.hide();\n        };\n        /**\n         * Round a number to event and not less than 100.\n         *\n         * @param {number} v value to round\n         *\n         * @returns {int}\n         */\n        function round(v) {\n            if (v < 100) {\n                v = 100;\n            }\n            return Math.floor(v / 2) * 2;\n        }\n        this.getCanvasSize = function () {\n            return canvas.width() + \"x\" + canvas.height();\n        };\n\n        this.setCanvasSize = function (w, h) {\n            canvas.width(round(w));\n            canvas.height(round(h));\n        };\n        this.show = function () {\n            VNCDialog.dialog('open');\n            VNCDialog.width('auto');\n            VNCDialog.height('auto');\n        };\n        self.setCanvasSize($(window).width() - 150, $(window).height() - 150);\n    }\n}\n"],"names":["constructor","VNCDialogId","str","window","INCLUDE_URI","VPLUtil","options","scriptPath","Util","loadScript","log","load_scripts","rfb","clipboard","titleText","self","this","title","message","lastState","VNCDialog","canvas","onCloseAction","doNothing","needResize","inputarea","document","createElement","keyboardButton","is","blur","focus","receiveClipboard","text","setEntry1","openClipboard","show","getFocus","isConnected","get_keyboard","set_focused","lostFocus","style","position","left","top","width","height","opacity","backgroundColor","borderStyle","outlineStyle","autocapitalize","autocomplete","autocorrect","wrap","spellcheck","append","HTMLUpdateClipboard","VPLUI","genIcon","HTMLPaste","controlDialogSize","bw","bh","dialog","parent","prev","outerHeight","updateState","state","oldstate","msg","setMessage","setTitle","round","v","Math","floor","VPLClipboard","getEntry1","execCommand","clipboardPasteFrom","getEntry2","on","e","target","displayResize","w","h","setCanvasSize","get_display","viewportChange","closeOnEscape","autoOpen","modal","classes","create","setTitleBar","dragStop","open","beforeClose","close","disconnect","resizeStop","css","updateTitle","t","connect","secure","host","port","password","path","onClose","RFB","set_local_cursor","get_cursor_uri","isOpen","hide","getCanvasSize"],"mappings":"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"}