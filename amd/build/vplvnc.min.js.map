{"version":3,"file":"vplvnc.min.js","sources":["../src/vplvnc.js"],"sourcesContent":["// This file is part of VPL for Moodle - http://vpl.dis.ulpgc.es/\n//\n// VPL for Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// VPL for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with VPL for Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * VNC client control\n *\n * @copyright 2014 Juan Carlos Rodríguez-del-Pino\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author Juan Carlos Rodríguez-del-Pino <jcrodriguez@dis.ulpgc.es>\n */\n\nimport $ from 'jquery';\nimport {VPLUtil} from 'mod_vpl/vplutil';\nimport {VPLUI} from 'mod_vpl/vplui';\nimport {VPLClipboard} from 'mod_vpl/vplclipboard';\nimport console from 'core/log';\n\nexport class VPLVNCClient {\n    constructor(VNCDialogId, str) {\n        var self = this;\n        var rfb;\n        var title = '';\n        var message = '';\n        var lastState = 'disconnected';\n        var lastCanvas = null;\n        var VNCDialog = $('#' + VNCDialogId);\n        var canvas = $('#' + VNCDialogId + \" div\");\n        var onCloseAction = VPLUtil.doNothing;\n        var clipboard;\n        var needResize = true;\n        var titleText;\n        /**\n         * Add input for activating virtual keyboard\n         */\n        function addVirtualKeyboardInput() {\n            var inputarea = window.document.createElement('input');\n            inputarea.style.position = 'absolute';\n            inputarea.style.left = '0px';\n            inputarea.style.top = '-10000px';\n            inputarea.style.width = '1em';\n            inputarea.style.height = '1ex';\n            inputarea.style.opacity = '0';\n            inputarea.style.backgroundColor = 'transparent';\n            inputarea.style.borderStyle = 'none';\n            inputarea.style.outlineStyle = 'none';\n            inputarea.autocapitalize = 'off';\n            inputarea.autocomplete = 'off';\n            inputarea.autocorrect = 'off';\n            inputarea.wrap = 'off';\n            inputarea.spellcheck = 'false';\n            VNCDialog.append(inputarea);\n        }\n        addVirtualKeyboardInput();\n\n        /**\n         * Event handler of paste button at clipboard.\n         */\n        function pasteClipboard() {\n            if (self.isConnected()) {\n                rfb.clipboardPasteFrom(clipboard.getEntry2());\n            }\n        }\n        /**\n         * Event handler of paste button at clipboard.\n         *\n         * @param {object} rfb vnc client object\n         * @param {string} text Text received\n         */\n        function receiveClipboard(rfb, text) {\n            clipboard.setEntry1(text);\n        }\n        /**\n         * Event handler of clipboard button.\n         */\n        function openClipboard() {\n            clipboard.show();\n        }\n        /**\n         * Inform rfb of focus received.\n         */\n        function getFocus() {\n            if (self.isConnected()) {\n                //rfb.get_keyboard().set_focused(true);\n            }\n        }\n        /**\n         * Inform rfb of focus lost.\n         */\n        function lostFocus() {\n            if (self.isConnected()) {\n                //rfb.get_keyboard().set_focused(false);\n            }\n        }\n        /**\n         * Tries to do a copy.\n         */\n        function copyAction() {\n            clipboard.setEntry1(clipboard.getEntry1());\n            document.execCommand('copy');\n        }\n        var HTMLUpdateClipboard = VPLUI.genIcon('copy', 'sw') + ' ' + str('copy');\n        var HTMLPaste = VPLUI.genIcon('paste', 'sw') + ' ' + str('paste');\n        clipboard = new VPLClipboard('vpl_dialog_vnc_clipboard', HTMLUpdateClipboard, copyAction, HTMLPaste, pasteClipboard,\n            lostFocus);\n        canvas.on('click', function (e) {\n            if (e.target == canvas[0]) {\n                getFocus();\n            } else {\n                lostFocus();\n            }\n        });\n        this.displayResize = function () {\n            var w = round(VNCDialog.width());\n            var h = round(VNCDialog.parent().height() - VNCDialog.prev().outerHeight());\n            self.setCanvasSize(w, h);\n        };\n\n        /**\n         * Event handler for the VNC dialog open event.\n         */\n        function openHandler() {\n            self.restoreLastCanvas();\n            controlDialogSize();\n        }\n\n        /**\n         * Event handler that limit the size of the vnc client windows.\n         *\n         */\n        function controlDialogSize() {\n            // Resize if dialog is large than screen.\n            var bw = $('html').width();\n            var bh = $(window).height();\n            if (VNCDialog.width() > bw) {\n                needResize = true;\n                VNCDialog.dialog(\"option\", \"width\", bw);\n            }\n            if (VNCDialog.parent().height() > bh) {\n                needResize = true;\n                VNCDialog.dialog(\"option\", \"height\", bh - VNCDialog.prev().outerHeight());\n            }\n        }\n        VNCDialog.dialog({\n            closeOnEscape: false,\n            autoOpen: false,\n            modal: true,\n            width: 'auto',\n            height: 'auto',\n            classes: {\n                \"ui-dialog\": 'vpl_ide vpl_vnc',\n            },\n            create: function () {\n                titleText = VPLUI.setTitleBar(VNCDialog, 'vnc', 'graphic',\n                                              ['clipboard', 'keyboard'],\n                                              [openClipboard, getFocus]);\n            },\n            dragStop: controlDialogSize,\n            focus: getFocus,\n            open: openHandler,\n            beforeClose: function () {\n                if (needResize) {\n                    needResize = false;\n                    self.displayResize();\n                }\n            },\n            close: function () {\n                self.disconnect();\n            },\n            resizeStop: function () {\n                controlDialogSize();\n                needResize = true;\n            }\n        });\n\n        VNCDialog.css(\"padding\", \"1px\");\n        VNCDialog.parent().css('z-index', 2000);\n\n        this.updateTitle = function () {\n            var text = title;\n            if (message !== '') {\n                text += ' (' + message + ')';\n            }\n            titleText.text(str('console') + \": \" + text);\n        };\n        this.setTitle = function (t) {\n            title = t;\n            this.updateTitle();\n        };\n        this.setMessage = function (t) {\n            message = t;\n            this.updateTitle();\n        };\n        this.saveLastCanvas = function () {\n            if (self.isConnected()) {\n                lastCanvas = rfb.toDataURL();\n            }\n        };\n        this.restoreLastCanvas = function () {\n            if (lastCanvas && lastState === 'disconnected') {\n                var img = document.createElement('img');\n                img.src = lastCanvas;\n                img.style.width = '100%';\n                img.style.height = '100%';\n                canvas.html('');\n                canvas.append(img);\n                lastCanvas = null;\n            }\n        };\n        /**\n         * Event handler for the VNC connection established.\n         * @param {*} event\n         */\n        function connectHandler(event) {\n            updateState('connected', event);\n        }\n        /**\n         * Event handler for the VNC connection closed.\n         * @param {*} event\n         */\n        function disconnectHandler(event) {\n            self.saveLastCanvas();\n            updateState('disconnect', event);\n        }\n\n        /**\n         * Event handler for the VNC server verification.\n         * @param {*} event\n         */\n        function serververificationHandler(event) {\n            VPLUtil.log('VNC server verification ' + event.detail.status);\n        }\n        /**\n         * Event handler for the VNC credentials required.\n         * @param {*} event\n         */\n        function credentialsrequiredHandler(event) {\n            VPLUtil.log('VNC credentials required ' + event.detail.status);\n        }\n        /**\n         * Event handler for the VNC security failure.\n         * @param {*} event\n         */\n        function securityfailureHandler(event) {\n            updateState('failed', event);\n            VPLUtil.log('VNC security failure ' + event.detail.status);\n        }\n        /**\n         * Event handler for the VNC clipping viewport.\n         * @param {*} event\n         */\n        function clippingviewportHandler(event) {\n            VPLUtil.log('VNC clipping viewport ' + event.detail.status);\n        }\n        /**\n         * Event handler for the VNC capabilities.\n         * @param {*} event\n         */\n        function capabilitiesHandler(event) {\n            VPLUtil.log('VNC capabilities ' + event.detail.status);\n        }\n        /**\n         * Event handler for the VNC desktop name.\n         * @param {*} event\n         */\n        function desktopnameHandler(event) {\n            VPLUtil.log('VNC desktop name ' + event.detail.status);\n            self.setTitle(event.detail.name);\n        }\n\n        /**\n         * Event handler to show vnc client state in windows title.\n         *\n         * @param {string} newstate Name of the new state\n         * @param {Event} event Event that produce the state change\n         */\n        function updateState(newstate, event) {\n            switch (newstate) {\n                case \"connected\":\n                    lastState = 'connected';\n                    self.displayResize();\n                    self.setMessage('');\n                    self.setTitle(str('connected'));\n                    break;\n                case \"disconnect\":\n                case \"disconnected\":\n                    lastState = 'disconnected';\n                    self.setTitle(str('connection_closed'));\n                    self.restoreLastCanvas();\n                    break;\n                case \"failed\":\n                    lastState = 'disconnected';\n                    self.setTitle(str('connection_fail'));\n                    console.log(\"VNC client: \" + event.detail.status);\n                    break;\n                default:\n                    self.setMessage('');\n                    self.setTitle(str('connecting'));\n            }\n        }\n\n        this.connect = function (secure, host, port, password, path, onClose) {\n            VPLUtil.loadModule('noVNC/core/rfb', 'RFB')\n                .then(function (RFB) {\n                if (!port) {\n                    port = secure ? 443 : 80;\n                }\n                clipboard.setEntry1('');\n                onCloseAction = onClose;\n                if (rfb) {\n                    if (lastState !== 'disconnected') {\n                        rfb.disconnect();\n                    }\n                    rfb = null;\n                }\n                canvas.html('');\n                self.show();\n                lastState = 'connecting';\n                self.setTitle(str('connecting'));\n                var target = canvas[0];\n                var url = (secure ? 'wss' : 'ws') + '://' + host + ':' + port + '/' +path;\n                rfb = new RFB(target, url, {\n                        'encrypt': secure,\n                        'repeaterID': '',\n                        'true_color': true,\n                        'local_cursor': true,\n                        'shared': false,\n                        'view_only': false,\n                        'credentials': { 'password': password }\n                    });\n                rfb.addEventListener(\"connect\", connectHandler);\n                rfb.addEventListener(\"disconnect\", disconnectHandler);\n                rfb.addEventListener(\"serververification\", serververificationHandler);\n                rfb.addEventListener(\"credentialsrequired\", credentialsrequiredHandler);\n                rfb.addEventListener(\"securityfailure\", securityfailureHandler);\n                rfb.addEventListener(\"clippingviewport\", clippingviewportHandler);\n                rfb.addEventListener(\"capabilities\", capabilitiesHandler);\n                rfb.addEventListener(\"clipboard\", receiveClipboard);\n                rfb.addEventListener(\"bell\", () => {console.log('\\x07Bell received');});\n                rfb.addEventListener(\"desktopname\", desktopnameHandler);\n                rfb.clipViewport = true;\n                rfb.scaleViewport = false;\n                rfb.resizeSession = true;\n                rfb.qualityLevel = 6;\n                rfb.compressionLevel = 2;\n                rfb.showDotCursor = true;\n            }).catch(function (error) {\n                console.error('Failed to load RFB module:', error);\n                self.setTitle(str('connection_fail'));\n                self.show();\n            });\n        };\n        this.isOpen = function () {\n            return VNCDialog.dialog(\"isOpen\");\n        };\n        this.close = function () {\n            VNCDialog.dialog(\"close\");\n        };\n        this.isConnected = function () {\n            return rfb && lastState != 'disconnected';\n        };\n        this.disconnect = function () {\n            if (this.isConnected()) {\n                self.saveLastCanvas();\n                rfb.disconnect();\n            }\n            onCloseAction();\n            clipboard.hide();\n        };\n        /**\n         * Round a number to even and not less than 100.\n         * @param {number} v value to round\n         * @returns {int}\n         */\n        function round(v) {\n            if (v < 100) {\n                v = 100;\n            }\n            return Math.floor(v / 2) * 2;\n        }\n        this.getCanvasSize = function () {\n            return canvas.width() + \"x\" + canvas.height();\n        };\n\n        this.setCanvasSize = function (w, h) {\n            w = round(w);\n            h = round(h);\n            canvas.width(w);\n            canvas.height(h);\n            var inner = canvas.find('canvas');\n            if (inner.length > 0) {\n                inner.width(w);\n                inner.height(h);\n            }\n        };\n        this.show = function () {\n            VNCDialog.dialog('open');\n            VNCDialog.width('auto');\n            VNCDialog.height('auto');\n        };\n        self.setCanvasSize($(window).width() - 150, $(window).height() - 150);\n    }\n}\n"],"names":["constructor","VNCDialogId","str","rfb","clipboard","titleText","inputarea","self","this","title","message","lastState","lastCanvas","VNCDialog","canvas","onCloseAction","VPLUtil","doNothing","needResize","receiveClipboard","text","setEntry1","openClipboard","show","getFocus","isConnected","lostFocus","window","document","createElement","style","position","left","top","width","height","opacity","backgroundColor","borderStyle","outlineStyle","autocapitalize","autocomplete","autocorrect","wrap","spellcheck","append","HTMLUpdateClipboard","VPLUI","genIcon","HTMLPaste","controlDialogSize","bw","bh","dialog","parent","prev","outerHeight","connectHandler","event","updateState","disconnectHandler","saveLastCanvas","serververificationHandler","log","detail","status","credentialsrequiredHandler","securityfailureHandler","clippingviewportHandler","capabilitiesHandler","desktopnameHandler","setTitle","name","newstate","displayResize","setMessage","restoreLastCanvas","round","v","Math","floor","VPLClipboard","getEntry1","execCommand","clipboardPasteFrom","getEntry2","on","e","target","w","h","setCanvasSize","closeOnEscape","autoOpen","modal","classes","create","setTitleBar","dragStop","focus","open","beforeClose","close","disconnect","resizeStop","css","updateTitle","t","toDataURL","img","src","html","connect","secure","host","port","password","path","onClose","loadModule","then","RFB","addEventListener","clipViewport","scaleViewport","resizeSession","qualityLevel","compressionLevel","showDotCursor","catch","error","isOpen","hide","getCanvasSize","inner","find","length"],"mappings":"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"}