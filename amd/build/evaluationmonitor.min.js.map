{"version":3,"file":"evaluationmonitor.min.js","sources":["../src/evaluationmonitor.js"],"sourcesContent":["// This file is part of VPL for Moodle - http://vpl.dis.ulpgc.es/\n//\n// VPL for Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// VPL for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with VPL for Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Evaluation monitoring\n *\n * @copyright 2013 onward Juan Carlos Rodr√≠guez-del-Pino\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author Juan Carlos Rodr√≠guez-del-Pino <jcrodriguez@dis.ulpgc.es>\n */\n\n/* globals VPL */\n\nimport {VPLUI} from 'mod_vpl/vplui';\n\n/**\n * Evaluate a submission\n * @param {*} options {nexturl: url to go next, ajaxurl: url to evaluate}\n */\nexport const init = (options) => {\n    options.next = function() {\n        window.location = options.nexturl;\n    };\n\n    /**\n     * Show a error message in a modal dialog.\n     * Allows to go next evaluation.\n     *\n     * @param {string} message Message to shohw in dialog.\n     */\n    function showErrorMessage(message) {\n        VPLUI.showErrorMessage(message, {\n            next: options.next\n        });\n    }\n\n    var action;\n    var executionActions = {\n        'ajaxurl': options.ajaxurl,\n        'run': showErrorMessage,\n        'getLastAction': function() {\n            action();\n        },\n    };\n\n    action = function() {\n        VPLUI.requestAction('evaluate', 'evaluating', {}, options.ajaxurl)\n        .done(\n                function(response) {\n                    VPLUI.webSocketMonitor(response, 'evaluate', 'evaluating', executionActions)\n                    .done(options.next)\n                    .fail(showErrorMessage);\n                }\n        )\n        .fail(showErrorMessage);\n    };\n    action();\n};\n/**\n * Evaluation for multiple students\n * @param {object} options {baseurl: Base URL for the evaluation}\n */\nexport const multievaluation = (options) => {\n    var baseurl = options.baseurl;\n    var goon = true;\n\n    /**\n     * Get grade from result\n     * @param {object} result Result object\n     * @returns {string} Grade\n     */\n    function getGrade(result) {\n        var grade;\n        if (typeof result == 'undefined' || typeof result.grade === 'undefined' || result.grade === null) {\n            grade = '‚õî';\n        } else {\n            grade = 'üëâ ' + result.grade;\n        }\n        return grade;\n    }\n\n    /**\n     * Evaluate a student\n     * @param {number} id Student id\n     * @param {number} subid Submission id\n     */\n    async function evaluateStudent(id, subid) {\n        var ajaxurl = baseurl + id + '&action=';\n        return new Promise(\n            (resolve, reject) => {\n                var ok = () => {\n                    resolve(true);\n                };\n                var cancel = () => {\n                    VPL.updatesublist(subid, getGrade());\n                    goon = false;\n                    reject(false);\n                };\n                var action;\n                var showErrorMessage = function(message) {\n                    VPLUI.showErrorMessage(message, {\n                        closeOnEscape: false,\n                        close: function() {\n                            VPL.unhlrow(subid);\n                        },\n                        stop: cancel,\n                        next: function() {\n                            VPL.updatesublist(subid, getGrade());\n                            ok();\n                        },\n                    });\n                };\n                var executionActions = {\n                    'ajaxurl': ajaxurl,\n                    'run': showErrorMessage,\n                    'setResult': function(result) {\n                        VPL.updatesublist(subid, getGrade(result));\n                    },\n                    'getLastAction': function() {\n                        action();\n                    },\n                };\n                action = function() {\n                    VPL.hlrow(subid);\n                    VPLUI.requestAction('evaluate', 'evaluating', {}, ajaxurl)\n                    .done(\n                            function(response) {\n                                VPLUI.webSocketMonitor(response, 'evaluate', 'evaluating', executionActions)\n                                .done(ok)\n                                .fail(showErrorMessage);\n                            }\n                    )\n                    .fail(showErrorMessage);\n                };\n                action();\n            }\n        );\n    }\n\n    /**\n     * Evaluate all students\n     */\n    async function evaluateStudents() {\n        var students = VPL.evaluateStudents;\n        var nstudents = students.length;\n        for (var i = 0; i < nstudents; i++) {\n            var student = students[i];\n            if (i === 0) {\n                VPL.hideTableRows(student.subid);\n            }\n            var firstTD = VPL.getTableRow(student.subid).querySelector('td');\n            firstTD.innerHTML = (i + 1) + '/' + nstudents;\n            VPL.showTableRow(student.subid);\n            try {\n                await evaluateStudent(student.id, student.subid);\n            } catch (e) {\n                VPL.unhlrow(student.subid);\n                VPL.updatesublist(student.subid, getGrade());\n                if (!goon) {\n                    break;\n                }\n            }\n        }\n    }\n    evaluateStudents();\n};\n"],"names":["options","showErrorMessage","message","next","action","window","location","nexturl","executionActions","ajaxurl","requestAction","done","response","webSocketMonitor","fail","baseurl","goon","getGrade","result","grade","evaluateStudent","id","subid","Promise","resolve","reject","ok","cancel","VPL","updatesublist","closeOnEscape","close","unhlrow","stop","hlrow","students","evaluateStudents","nstudents","length","i","student","hideTableRows","getTableRow","querySelector","innerHTML","showTableRow","e"],"mappings":"8MA+BqBA,mBAWRC,iBAAiBC,sBAChBD,iBAAiBC,QAAS,CAC5BC,KAAMH,QAAQG,WAIlBC,OAhBJJ,QAAQG,KAAO,WACXE,OAAOC,SAAWN,QAAQO,aAgB1BC,iBAAmB,SACRR,QAAQS,YACZR,+BACU,WACbG,YAIRA,OAAS,wBACCM,cAAc,WAAY,aAAc,GAAIV,QAAQS,SACzDE,MACO,SAASC,uBACCC,iBAAiBD,SAAU,WAAY,aAAcJ,kBAC1DG,KAAKX,QAAQG,MACbW,KAAKb,qBAGjBa,KAAKb,gDAQkBD,cACxBe,QAAUf,QAAQe,QAClBC,MAAO,WAOFC,SAASC,oBAEO,IAAVA,aAAiD,IAAjBA,OAAOC,OAA0C,OAAjBD,OAAOC,MACtE,IAEA,MAAQD,OAAOC,qBAUhBC,gBAAgBC,GAAIC,WAC3Bb,QAAUM,QAAUM,GAAK,kBACtB,IAAIE,SACP,CAACC,QAASC,cASFrB,OARAsB,GAAK,KACLF,SAAQ,IAERG,OAAS,KACTC,IAAIC,cAAcP,MAAOL,YACzBD,MAAO,EACPS,QAAO,IAGPxB,iBAAmB,SAASC,sBACtBD,iBAAiBC,QAAS,CAC5B4B,eAAe,EACfC,MAAO,WACHH,IAAII,QAAQV,QAEhBW,KAAMN,OACNxB,KAAM,WACFyB,IAAIC,cAAcP,MAAOL,YACzBS,SAIRlB,iBAAmB,SACRC,YACJR,2BACM,SAASiB,QAClBU,IAAIC,cAAcP,MAAOL,SAASC,wBAErB,WACbd,YAGRA,OAAS,WACLwB,IAAIM,MAAMZ,oBACJZ,cAAc,WAAY,aAAc,GAAID,SACjDE,MACO,SAASC,uBACCC,iBAAiBD,SAAU,WAAY,aAAcJ,kBAC1DG,KAAKe,IACLZ,KAAKb,qBAGjBa,KAAKb,mDAWdkC,SAAWP,IAAIQ,iBACfC,UAAYF,SAASG,OAChBC,EAAI,EAAGA,EAAIF,UAAWE,IAAK,KAC5BC,QAAUL,SAASI,GACb,IAANA,GACAX,IAAIa,cAAcD,QAAQlB,OAEhBM,IAAIc,YAAYF,QAAQlB,OAAOqB,cAAc,MACnDC,UAAaL,EAAI,EAAK,IAAMF,UACpCT,IAAIiB,aAAaL,QAAQlB,iBAEfF,gBAAgBoB,QAAQnB,GAAImB,QAAQlB,OAC5C,MAAOwB,MACLlB,IAAII,QAAQQ,QAAQlB,OACpBM,IAAIC,cAAcW,QAAQlB,MAAOL,aAC5BD,aAMjBoB"}