{"version":3,"file":"vplterminal.min.js","sources":["../src/vplterminal.js"],"sourcesContent":["// This file is part of VPL for Moodle - http://vpl.dis.ulpgc.es/\n//\n// VPL for Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// VPL for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with VPL for Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Terminal control\n *\n * @copyright 2014 Juan Carlos Rodríguez-del-Pino\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author Juan Carlos Rodríguez-del-Pino <jcrodriguez@dis.ulpgc.es>\n */\n\nimport $ from 'jquery';\n/* eslint-disable no-unused-vars */\nimport jqui from 'jqueryui';\n/* eslint-enable no-unused-vars */\nimport url from 'core/url';\nimport {VPLUtil} from 'mod_vpl/vplutil';\nimport {VPLUI} from 'mod_vpl/vplui';\nimport {VPLClipboard} from 'mod_vpl/vplclipboard';\n//import { Terminal } from 'mod_vpl/lib/xterm/xterm';\nconst NTHEMES = 5;\nexport const VPLTerminal = function(dialogId, terminalId, str) {\n    var self = this;\n    var ws = null;\n    var onCloseAction = VPLUtil.doNothing;\n    var title = '';\n    var message = '';\n    var tdialog = $('#' + dialogId);\n    var tIde = $('#vplide');\n    var titleText = '';\n    var clipboard = null;\n    var cliboardMaxsize = 64000;\n    var clipboardData = '';\n\n    var terminal;\n    var terminalTag = $('#' + terminalId);\n    this.updateTitle = function() {\n        var text = title;\n        if (message !== '') {\n            text += ' (' + message + ')';\n        }\n        titleText.text(str('console') + \": \" + text);\n    };\n    this.setTitle = function(t) {\n        title = t;\n        this.updateTitle();\n    };\n    this.setMessage = function(t) {\n        message = t;\n        this.updateTitle();\n    };\n    /**\n     * Manages the data received from clipboard\n     * @param {string} data Data recieved\n     */\n    function receiveClipboard(data) {\n        clipboardData += data;\n        if (clipboardData.length > cliboardMaxsize) {\n            var from = clipboardData.length - cliboardMaxsize / 2;\n            clipboardData = clipboardData.substr(from);\n        }\n    }\n    /**\n     * Sends the clipboard data to the connection\n     */\n    function pasteClipboard() {\n        if (ws && ws.readyState == ws.OPEN) {\n            ws.send(clipboard.getEntry2());\n        }\n    }\n    /**\n     * Updates the data in the clipboard dialog\n     */\n    function updateClipboard() {\n        clipboard.setEntry1(clipboardData);\n    }\n    /**\n     * Opens the clipboard dialog\n     */\n    function openClipboard() {\n        updateClipboard();\n        clipboard.show();\n    }\n    this.write = function(text) {\n        terminal.write(text);\n        return text;\n    };\n\n    this.connect = function(server, onClose) {\n        onCloseAction = onClose;\n        if (\"WebSocket\" in window) {\n            terminal.reset();\n            self.show();\n            if (ws) {\n                ws.close();\n            }\n            clipboardData = '';\n            self.setMessage('');\n            self.setTitle(str('connecting'));\n            ws = new WebSocket(server);\n            ws.writeBuffer = '';\n            ws.writeIt = function() {\n                terminal.write(ws.writeBuffer);\n                receiveClipboard(ws.writeBuffer);\n                ws.writeBuffer = '';\n            };\n            ws.onmessage = function(event) {\n                if (ws.writeBuffer.length > 0) {\n                    ws.writeBuffer += event.data;\n                } else {\n                    ws.writeBuffer = event.data;\n                    setTimeout(ws.writeIt, 35);\n                }\n            };\n            ws.onopen = function() {\n                self.setMessage('');\n                self.setTitle(str('connected'));\n            };\n            ws.onclose = function() {\n                self.setTitle(str('connection_closed'));\n                terminal.blur();\n                self.stopBlinking();\n                onClose();\n                ws.stopOutput = true;\n            };\n        } else {\n            terminal.write('WebSocket not available: Upgrade your browser');\n        }\n    };\n    this.writeLocal = function(text) {\n        ws.onmessage({\n            data: text\n        });\n        return text;\n    };\n    this.setDataCallback = function(call) {\n        ws.onData = call;\n    };\n    this.closeLocal = function() {\n        if (ws) {\n            ws.writeIt();\n            ws.close();\n            self.setTitle(str('connection_closed'));\n        }\n    };\n    this.connectLocal = function(onClose, onData) {\n        onCloseAction = onClose;\n        terminal.reset();\n        self.show();\n        if (ws) {\n            ws.close();\n        }\n        clipboardData = '';\n        self.setMessage('');\n        self.setTitle(str('running'));\n        ws = {};\n        ws.onData = onData;\n        ws.writeBuffer = '';\n        ws.readBuffer = '';\n        ws.readyState = 1;\n        ws.OPEN = 1;\n        ws.close = function() {\n            ws = false;\n            self.stopBlinking();\n        };\n        ws.onmessage = function(event) {\n            ws.writeBuffer = event.data;\n            ws.writeIt();\n        };\n        ws.writeIt = function() {\n            if (ws) {\n                terminal.write(ws.writeBuffer);\n                receiveClipboard(ws.writeBuffer);\n                ws.writeBuffer = '';\n            }\n        };\n        ws.send = function(text) {\n            // Process backspace.\n            if (text == '\\u007f') {\n                if (ws.readBuffer.length > 0) {\n                    self.writeLocal('\\b \\b');\n                    ws.readBuffer = ws.readBuffer.substr(0, ws.readBuffer.length - 1);\n                }\n            } else {\n                self.writeLocal(text);\n                ws.readBuffer += text;\n            }\n            var pos = ws.readBuffer.indexOf(\"\\r\");\n            if (pos != -1) {\n                var data = ws.readBuffer.substr(0, pos);\n                ws.readBuffer = ws.readBuffer.substr(pos + 1);\n                ws.onData(data);\n            }\n        };\n    };\n    this.isOpen = function() {\n        return tdialog.dialog(\"isOpen\");\n    };\n    this.close = function() {\n        self.stopBlinking();\n        tdialog.dialog(\"close\");\n    };\n    this.isConnected = function() {\n        return ws && ws.readyState != ws.CLOSED;\n    };\n    this.disconnect = function() {\n        if (ws && ws.readyState == ws.OPEN) {\n            onCloseAction();\n            if (ws) {\n                ws.close();\n            }\n            self.stopBlinking();\n        }\n    };\n    var HTMLUpdateClipboard = VPLUI.genIcon('copy', 'sw') + ' ' + str('copy');\n    var HTMLPaste = VPLUI.genIcon('paste', 'sw') + ' ' + str('paste');\n    clipboard = new VPLClipboard('vpl_dialog_terminal_clipboard', HTMLUpdateClipboard, function() {\n            updateClipboard();\n            document.execCommand('copy');\n        }, HTMLPaste, pasteClipboard);\n    this.closeDialog = function() {\n        clipboard.hide();\n        self.disconnect();\n    };\n    /**\n     * Sets the terminal theme\n     * @param {int} theme\n     */\n    function setTheme(theme) {\n        var cbase = \"vpl_terminal_theme\";\n        var nthemes = 5;\n        tdialog.data('terminal_theme', theme);\n        VPLUtil.setUserPreferences({terminalTheme: theme});\n        for (var i = 0; i < nthemes; i++) {\n            tdialog.removeClass(cbase + i);\n        }\n        tdialog.addClass(cbase + theme);\n    }\n    /**\n     * Limits the size of the dialogo to the IDE\n     */\n    function controlDialogSize() {\n        // Resize if dialog is large than screen.\n        var bw = tIde.width();\n        var bh = tIde.height();\n        if (tdialog.width() > bw) {\n            tdialog.dialog(\"option\", \"width\", bw);\n        }\n        if (tdialog.parent().height() > bh) {\n            tdialog.dialog(\"option\", \"height\", bh - tdialog.prev().outerHeight());\n        }\n    }\n    tdialog.dialog({\n        closeOnEscape: false,\n        autoOpen: false,\n        width: 'auto',\n        height: 'auto',\n        resizable: true,\n        dragStop: controlDialogSize,\n        open: controlDialogSize,\n        focus: function() {\n            controlDialogSize();\n            terminal.focus();\n            self.startBlinking();\n        },\n        classes: {\n            \"ui-dialog\":  'vpl_ide vpl_vnc',\n        },\n        create: function() {\n            titleText = VPLUI.setTitleBar(tdialog, 'console', 'console',\n                    ['clipboard', 'keyboard', 'theme'],\n                    [openClipboard,\n                    function() {\n                        terminal.focus();\n                        self.startBlinking();\n                    },\n                    function() {\n                        // Cycle themes from 0 to NTHEMES-1.\n                        var theme = (tdialog.data('terminal_theme') + 1) % NTHEMES;\n                        setTheme(theme);\n                    }]);\n        },\n        close: function() {\n            self.closeDialog();\n        },\n        resizeStop: function() {\n            tdialog.width(tdialog.parent().width());\n            tdialog.height(tdialog.parent().height() - tdialog.prev().outerHeight());\n            controlDialogSize();\n            terminal.focus();\n            self.startBlinking();\n        }\n    });\n    this.setFontSize = function(size) {\n        terminalTag.css(\"font-size\", size + \"px\");\n    };\n    VPLUtil.getUserPreferences(function(data) {\n        setTheme(data.preferences.terminalTheme);\n    });\n    tdialog.css(\"padding\", \"1px\");\n    tdialog.parent().css('z-index', 2000);\n    this.show = function() {\n        tdialog.dialog('open');\n        terminal.focus();\n        self.startBlinking();\n    };\n    this.startBlinking = function() {\n        terminal.options.cursorBlink = true;\n    };\n    this.stopBlinking = function() {\n        terminal.options.cursorBlink = false;\n    };\n    this.init = async function() {\n        // Load xterm.js library\n        const libpath = url.relativeUrl('/mod/vpl/amd/src/lib/xterm/');\n        const link = document.createElement('link');\n        link.rel = 'stylesheet';\n        link.href = libpath + 'xterm.css';\n        document.head.appendChild(link);\n        const xterm = await import(libpath + 'xterm.js');\n        terminal = new xterm.Terminal( {\n                    cols: 80,\n                    rows: 24\n                });\n        self.stopBlinking();\n        terminal.onData(function(data) {\n            if (ws && ws.readyState == ws.OPEN) {\n                ws.send(data);\n            }\n        });\n        terminal.open(terminalTag[0]);\n        terminal.reset();\n    };\n    this.init();\n};\n"],"names":["dialogId","terminalId","str","terminal","self","this","ws","onCloseAction","VPLUtil","doNothing","title","message","tdialog","tIde","titleText","clipboard","clipboardData","terminalTag","receiveClipboard","data","length","from","cliboardMaxsize","substr","updateClipboard","setEntry1","openClipboard","show","updateTitle","text","setTitle","t","setMessage","write","connect","server","onClose","window","reset","close","WebSocket","writeBuffer","writeIt","onmessage","event","setTimeout","onopen","onclose","blur","stopBlinking","stopOutput","writeLocal","setDataCallback","call","onData","closeLocal","connectLocal","readBuffer","readyState","OPEN","send","pos","indexOf","isOpen","dialog","isConnected","CLOSED","disconnect","HTMLUpdateClipboard","VPLUI","genIcon","HTMLPaste","setTheme","theme","cbase","setUserPreferences","terminalTheme","i","removeClass","addClass","controlDialogSize","bw","width","bh","height","parent","prev","outerHeight","VPLClipboard","document","execCommand","getEntry2","closeDialog","hide","closeOnEscape","autoOpen","resizable","dragStop","open","focus","startBlinking","classes","create","setTitleBar","resizeStop","setFontSize","size","css","getUserPreferences","preferences","options","cursorBlink","init","async","libpath","url","relativeUrl","link","createElement","rel","href","head","appendChild","xterm","Terminal","cols","rows"],"mappings":"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"}