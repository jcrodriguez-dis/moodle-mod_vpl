{"version":3,"file":"vplterminal.min.js","sources":["../src/vplterminal.js"],"sourcesContent":["// This file is part of VPL for Moodle - http://vpl.dis.ulpgc.es/\n//\n// VPL for Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// VPL for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with VPL for Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Terminal control\n *\n * @copyright 2014 Juan Carlos Rodríguez-del-Pino\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author Juan Carlos Rodríguez-del-Pino <jcrodriguez@dis.ulpgc.es>\n */\n\nimport $ from 'jquery';\n/* eslint-disable no-unused-vars */\nimport jqui from 'jqueryui';\n/* eslint-enable no-unused-vars */\nimport url from 'core/url';\nimport {VPLUtil} from 'mod_vpl/vplutil';\nimport {VPLUI} from 'mod_vpl/vplui';\nimport {VPLClipboard} from 'mod_vpl/vplclipboard';\n//import { Terminal } from 'mod_vpl/lib/xterm/xterm';\nconst NTHEMES = 5;\nexport const VPLTerminal = function(dialogId, terminalId, str) {\n    var self = this;\n    var ws = null;\n    var onCloseAction = VPLUtil.doNothing;\n    var title = '';\n    var message = '';\n    var tdialog = $('#' + dialogId);\n    var tIde = $('#vplide');\n    var titleText = '';\n    var clipboard = null;\n    var cliboardMaxsize = 64000;\n    var clipboardData = '';\n\n    var terminal;\n    var fitAddon;\n    var terminalTag = $('#' + terminalId);\n    this.updateTitle = function() {\n        var text = title;\n        if (message !== '') {\n            text += ' (' + message + ')';\n        }\n        titleText.text(str('console') + \": \" + text);\n    };\n    this.setTitle = function(t) {\n        title = t;\n        this.updateTitle();\n    };\n    this.setMessage = function(t) {\n        message = t;\n        this.updateTitle();\n    };\n    /**\n     * Manages the data received from clipboard\n     * @param {string} data Data recieved\n     */\n    function receiveClipboard(data) {\n        clipboardData += data;\n        if (clipboardData.length > cliboardMaxsize) {\n            var from = clipboardData.length - cliboardMaxsize / 2;\n            clipboardData = clipboardData.substr(from);\n        }\n    }\n    /**\n     * Sends the clipboard data to the connection\n     */\n    function pasteClipboard() {\n        if (ws && ws.readyState == ws.OPEN) {\n            ws.send(clipboard.getEntry2());\n        }\n    }\n    /**\n     * Updates the data in the clipboard dialog\n     */\n    function updateClipboard() {\n        clipboard.setEntry1(clipboardData);\n    }\n    /**\n     * Opens the clipboard dialog\n     */\n    function openClipboard() {\n        updateClipboard();\n        clipboard.show();\n    }\n    this.write = function(text) {\n        terminal.write(text);\n        return text;\n    };\n\n    this.connect = function(server, onClose) {\n        onCloseAction = onClose;\n        if (\"WebSocket\" in window) {\n            terminal.reset();\n            self.show();\n            if (ws) {\n                ws.close();\n            }\n            clipboardData = '';\n            self.startBlinking();\n            self.setMessage('');\n            self.setTitle(str('connecting'));\n            ws = new WebSocket(server);\n            ws.writeBuffer = '';\n            ws.writeIt = function() {\n                terminal.write(ws.writeBuffer);\n                receiveClipboard(ws.writeBuffer);\n                ws.writeBuffer = '';\n            };\n            ws.onmessage = function(event) {\n                if (ws.writeBuffer.length > 0) {\n                    ws.writeBuffer += event.data;\n                } else {\n                    ws.writeBuffer = event.data;\n                    setTimeout(ws.writeIt, 35);\n                }\n            };\n            ws.onopen = function() {\n                self.setMessage('');\n                self.setTitle(str('connected'));\n            };\n            ws.onclose = function() {\n                self.setTitle(str('connection_closed'));\n                terminal.blur();\n                self.stopBlinking();\n                onClose();\n                ws.stopOutput = true;\n            };\n        } else {\n            terminal.write('WebSocket not available: Upgrade your browser');\n        }\n    };\n    this.writeLocal = function(text) {\n        ws.onmessage({\n            data: text\n        });\n        return text;\n    };\n    this.setDataCallback = function(call) {\n        ws.onData = call;\n    };\n    this.closeLocal = function() {\n        if (ws) {\n            ws.writeIt();\n            ws.close();\n            self.setTitle(str('connection_closed'));\n            terminal.blur();\n            onCloseAction();\n            ws.stopOutput = true;\n        }\n        self.stopBlinking();\n    };\n    this.connectLocal = function(onClose, onData) {\n        onCloseAction = onClose;\n        terminal.reset();\n        self.show();\n        if (ws) {\n            ws.close();\n        }\n        clipboardData = '';\n        self.setMessage('');\n        self.setTitle(str('running'));\n        self.startBlinking();\n        ws = {};\n        ws.onData = onData;\n        ws.writeBuffer = '';\n        ws.readBuffer = '';\n        ws.readyState = 1;\n        ws.OPEN = 1;\n        ws.close = function() {\n            ws = false;\n            self.stopBlinking();\n        };\n        ws.onmessage = function(event) {\n            ws.writeBuffer = event.data;\n            ws.writeIt();\n        };\n        ws.writeIt = function() {\n            if (ws) {\n                terminal.write(ws.writeBuffer);\n                receiveClipboard(ws.writeBuffer);\n                ws.writeBuffer = '';\n            }\n        };\n        ws.send = function(text) {\n            // Process backspace.\n            if (text == '\\u007f') {\n                if (ws.readBuffer.length > 0) {\n                    self.writeLocal('\\b \\b');\n                    ws.readBuffer = ws.readBuffer.substr(0, ws.readBuffer.length - 1);\n                }\n            } else {\n                self.writeLocal(text);\n                ws.readBuffer += text;\n            }\n            var pos = ws.readBuffer.indexOf(\"\\r\");\n            if (pos != -1) {\n                var data = ws.readBuffer.substr(0, pos);\n                ws.readBuffer = ws.readBuffer.substr(pos + 1);\n                ws.onData(data);\n            }\n        };\n    };\n    this.isOpen = function() {\n        return tdialog.dialog(\"isOpen\");\n    };\n    this.close = function() {\n        tdialog.dialog(\"close\");\n        self.stopBlinking();\n    };\n    this.isConnected = function() {\n        return ws && ws.readyState != ws.CLOSED;\n    };\n    this.disconnect = function() {\n        if (ws && ws.readyState == ws.OPEN) {\n            onCloseAction();\n            if (ws) {\n                ws.close();\n            }\n        }\n        self.stopBlinking();\n    };\n    var HTMLUpdateClipboard = VPLUI.genIcon('copy', 'sw') + ' ' + str('copy');\n    var HTMLPaste = VPLUI.genIcon('paste', 'sw') + ' ' + str('paste');\n    clipboard = new VPLClipboard('vpl_dialog_terminal_clipboard', HTMLUpdateClipboard, function() {\n            updateClipboard();\n            document.execCommand('copy');\n        }, HTMLPaste, pasteClipboard);\n    this.closeDialog = function() {\n        clipboard.hide();\n        self.disconnect();\n    };\n    /**\n     * Sets the terminal theme\n     * @param {int} theme\n     */\n    function setTheme(theme) {\n        var cbase = \"vpl_terminal_theme\";\n        var nthemes = 5;\n        tdialog.data('terminal_theme', theme);\n        VPLUtil.setUserPreferences({terminalTheme: theme});\n        for (var i = 0; i < nthemes; i++) {\n            tdialog.removeClass(cbase + i);\n        }\n        tdialog.addClass(cbase + theme);\n    }\n    /**\n     * Limits the size of the dialogo to the IDE\n     */\n    function controlDialogSize() {\n        // Resize if dialog is large than screen.\n        var bw = tIde.width();\n        var bh = tIde.height();\n        if (tdialog.width() > bw) {\n            tdialog.dialog(\"option\", \"width\", bw);\n        }\n        if (tdialog.parent().height() > bh) {\n            tdialog.dialog(\"option\", \"height\", bh - tdialog.prev().outerHeight());\n        }\n        const margin = 13;\n        terminalTag.width(tdialog.width() - margin);\n        terminalTag.height(tdialog.height() - margin);\n        fitAddon.fit();\n        terminal.focus();\n    }\n    tdialog.dialog({\n        closeOnEscape: false,\n        autoOpen: false,\n        width: 'auto',\n        height: 'auto',\n        resizable: true,\n        dragStop: controlDialogSize,\n        open: controlDialogSize,\n        focus: function() {\n            controlDialogSize();\n            terminal.focus();\n        },\n        classes: {\n            \"ui-dialog\":  'vpl_ide vpl_vnc',\n        },\n        create: function() {\n            titleText = VPLUI.setTitleBar(tdialog, 'console', 'console',\n                    ['clipboard', 'keyboard', 'theme'],\n                    [openClipboard,\n                    function() {\n                        terminal.focus();\n                        self.startBlinking();\n                    },\n                    function() {\n                        // Cycle themes from 0 to NTHEMES-1.\n                        var theme = (tdialog.data('terminal_theme') + 1) % NTHEMES;\n                        setTheme(theme);\n                    }]);\n        },\n        close: function() {\n            self.stopBlinking();\n            self.closeDialog();\n        },\n        resizeStop: function() {\n            tdialog.width(tdialog.parent().width());\n            tdialog.height(tdialog.parent().height() - tdialog.prev().outerHeight());\n            controlDialogSize();\n            fitAddon.fit();\n            terminal.focus();\n        }\n    });\n    this.setFontSize = function(size) {\n        terminalTag.css(\"font-size\", size + \"px\");\n    };\n    VPLUtil.getUserPreferences(function(data) {\n        setTheme(data.preferences.terminalTheme);\n    });\n    tdialog.css(\"padding\", \"1px\");\n    tdialog.parent().css('z-index', 2000);\n    this.show = function() {\n        tdialog.dialog('open');\n        terminal.focus();\n    };\n    this.startBlinking = function() {\n        VPLUtil.log(\"Terminal: cursor start blinking\");\n        terminal.options.cursorBlink = true;\n    };\n    this.stopBlinking = function() {\n        VPLUtil.log(\"Terminal: cursor stop blinking\");\n        terminal.options.cursorBlink = false;\n    };\n    this.init = async function() {\n        // Load xterm.js library\n        const libpath = url.relativeUrl('/mod/vpl/amd/src/lib/xterm/');\n        const link = document.createElement('link');\n        link.rel = 'stylesheet';\n        link.href = libpath + 'xterm.css';\n        document.head.appendChild(link);\n        const xterm = await import(libpath + 'xterm.js');\n        const xtermFit = await import(libpath + 'addon-fit/addon-fit.js');\n        terminal = new xterm.Terminal( {\n                    scrollback: 5000,\n                });\n        fitAddon = new xtermFit.FitAddon();\n        terminal.loadAddon(fitAddon);\n        self.stopBlinking();\n        terminal.onData(function(data) {\n            if (ws && ws.readyState == ws.OPEN) {\n                ws.send(data);\n            }\n        });\n        terminal.open(terminalTag[0]);\n        fitAddon.fit();\n        terminal.reset();\n    };\n    this.init();\n};\n"],"names":["dialogId","terminalId","str","terminal","fitAddon","self","this","ws","onCloseAction","VPLUtil","doNothing","title","message","tdialog","tIde","titleText","clipboard","clipboardData","terminalTag","receiveClipboard","data","length","from","cliboardMaxsize","substr","updateClipboard","setEntry1","openClipboard","show","updateTitle","text","setTitle","t","setMessage","write","connect","server","onClose","window","reset","close","startBlinking","WebSocket","writeBuffer","writeIt","onmessage","event","setTimeout","onopen","onclose","blur","stopBlinking","stopOutput","writeLocal","setDataCallback","call","onData","closeLocal","connectLocal","readBuffer","readyState","OPEN","send","pos","indexOf","isOpen","dialog","isConnected","CLOSED","disconnect","HTMLUpdateClipboard","VPLUI","genIcon","HTMLPaste","setTheme","theme","cbase","setUserPreferences","terminalTheme","i","removeClass","addClass","controlDialogSize","bw","width","bh","height","parent","prev","outerHeight","fit","focus","VPLClipboard","document","execCommand","getEntry2","closeDialog","hide","closeOnEscape","autoOpen","resizable","dragStop","open","classes","create","setTitleBar","resizeStop","setFontSize","size","css","getUserPreferences","preferences","log","options","cursorBlink","init","async","libpath","url","relativeUrl","link","createElement","rel","href","head","appendChild","xterm","xtermFit","Terminal","scrollback","FitAddon","loadAddon"],"mappings":"6oBAiC2B,SAASA,SAAUC,WAAYC,SAalDC,SACAC,SAbAC,KAAOC,KACPC,GAAK,KACLC,cAAgBC,iBAAQC,UACxBC,MAAQ,GACRC,QAAU,GACVC,SAAU,mBAAE,IAAMb,UAClBc,MAAO,mBAAE,WACTC,UAAY,GACZC,UAAY,KAEZC,cAAgB,GAIhBC,aAAc,mBAAE,IAAMjB,qBAoBjBkB,iBAAiBC,UACtBH,eAAiBG,MACCC,OA3BA,KA2B0B,KACpCC,KAAOL,cAAcI,OAASE,KAClCN,cAAgBA,cAAcO,OAAOF,gBAcpCG,kBACLT,UAAUU,UAAUT,wBAKfU,gBACLF,kBACAT,UAAUY,YA7CTC,YAAc,eACXC,KAAOnB,MACK,KAAZC,UACAkB,MAAQ,KAAOlB,QAAU,KAE7BG,UAAUe,KAAK5B,IAAI,WAAa,KAAO4B,YAEtCC,SAAW,SAASC,GACrBrB,MAAQqB,OACHH,oBAEJI,WAAa,SAASD,GACvBpB,QAAUoB,OACLH,oBAkCJK,MAAQ,SAASJ,aAClB3B,SAAS+B,MAAMJ,MACRA,WAGNK,QAAU,SAASC,OAAQC,SAC5B7B,cAAgB6B,QACZ,cAAeC,QACfnC,SAASoC,QACTlC,KAAKuB,OACDrB,IACAA,GAAGiC,QAEPvB,cAAgB,GAChBZ,KAAKoC,gBACLpC,KAAK4B,WAAW,IAChB5B,KAAK0B,SAAS7B,IAAI,gBAClBK,GAAK,IAAImC,UAAUN,SAChBO,YAAc,GACjBpC,GAAGqC,QAAU,WACTzC,SAAS+B,MAAM3B,GAAGoC,aAClBxB,iBAAiBZ,GAAGoC,aACpBpC,GAAGoC,YAAc,IAErBpC,GAAGsC,UAAY,SAASC,OAChBvC,GAAGoC,YAAYtB,OAAS,EACxBd,GAAGoC,aAAeG,MAAM1B,MAExBb,GAAGoC,YAAcG,MAAM1B,KACvB2B,WAAWxC,GAAGqC,QAAS,MAG/BrC,GAAGyC,OAAS,WACR3C,KAAK4B,WAAW,IAChB5B,KAAK0B,SAAS7B,IAAI,eAEtBK,GAAG0C,QAAU,WACT5C,KAAK0B,SAAS7B,IAAI,sBAClBC,SAAS+C,OACT7C,KAAK8C,eACLd,UACA9B,GAAG6C,YAAa,IAGpBjD,SAAS+B,MAAM,uDAGlBmB,WAAa,SAASvB,aACvBvB,GAAGsC,UAAU,CACTzB,KAAMU,OAEHA,WAENwB,gBAAkB,SAASC,MAC5BhD,GAAGiD,OAASD,WAEXE,WAAa,WACVlD,KACAA,GAAGqC,UACHrC,GAAGiC,QACHnC,KAAK0B,SAAS7B,IAAI,sBAClBC,SAAS+C,OACT1C,gBACAD,GAAG6C,YAAa,GAEpB/C,KAAK8C,qBAEJO,aAAe,SAASrB,QAASmB,QAClChD,cAAgB6B,QAChBlC,SAASoC,QACTlC,KAAKuB,OACDrB,IACAA,GAAGiC,QAEPvB,cAAgB,GAChBZ,KAAK4B,WAAW,IAChB5B,KAAK0B,SAAS7B,IAAI,YAClBG,KAAKoC,iBACLlC,GAAK,IACFiD,OAASA,OACZjD,GAAGoC,YAAc,GACjBpC,GAAGoD,WAAa,GAChBpD,GAAGqD,WAAa,EAChBrD,GAAGsD,KAAO,EACVtD,GAAGiC,MAAQ,WACPjC,IAAK,EACLF,KAAK8C,gBAET5C,GAAGsC,UAAY,SAASC,OACpBvC,GAAGoC,YAAcG,MAAM1B,KACvBb,GAAGqC,WAEPrC,GAAGqC,QAAU,WACLrC,KACAJ,SAAS+B,MAAM3B,GAAGoC,aAClBxB,iBAAiBZ,GAAGoC,aACpBpC,GAAGoC,YAAc,KAGzBpC,GAAGuD,KAAO,SAAShC,MAEH,KAARA,KACIvB,GAAGoD,WAAWtC,OAAS,IACvBhB,KAAKgD,WAAW,SAChB9C,GAAGoD,WAAapD,GAAGoD,WAAWnC,OAAO,EAAGjB,GAAGoD,WAAWtC,OAAS,KAGnEhB,KAAKgD,WAAWvB,MAChBvB,GAAGoD,YAAc7B,UAEjBiC,IAAMxD,GAAGoD,WAAWK,QAAQ,UACpB,GAARD,IAAW,KACP3C,KAAOb,GAAGoD,WAAWnC,OAAO,EAAGuC,KACnCxD,GAAGoD,WAAapD,GAAGoD,WAAWnC,OAAOuC,IAAM,GAC3CxD,GAAGiD,OAAOpC,cAIjB6C,OAAS,kBACHpD,QAAQqD,OAAO,gBAErB1B,MAAQ,WACT3B,QAAQqD,OAAO,SACf7D,KAAK8C,qBAEJgB,YAAc,kBACR5D,IAAMA,GAAGqD,YAAcrD,GAAG6D,aAEhCC,WAAa,WACV9D,IAAMA,GAAGqD,YAAcrD,GAAGsD,OAC1BrD,gBACID,IACAA,GAAGiC,SAGXnC,KAAK8C,oBAELmB,oBAAsBC,aAAMC,QAAQ,OAAQ,MAAQ,IAAMtE,IAAI,QAC9DuE,UAAYF,aAAMC,QAAQ,QAAS,MAAQ,IAAMtE,IAAI,kBAahDwE,SAASC,WACVC,MAAQ,qBAEZ/D,QAAQO,KAAK,iBAAkBuD,wBACvBE,mBAAmB,CAACC,cAAeH,YACtC,IAAII,EAAI,EAAGA,EAHF,EAGeA,IACzBlE,QAAQmE,YAAYJ,MAAQG,GAEhClE,QAAQoE,SAASL,MAAQD,gBAKpBO,wBAEDC,GAAKrE,KAAKsE,QACVC,GAAKvE,KAAKwE,SACVzE,QAAQuE,QAAUD,IAClBtE,QAAQqD,OAAO,SAAU,QAASiB,IAElCtE,QAAQ0E,SAASD,SAAWD,IAC5BxE,QAAQqD,OAAO,SAAU,SAAUmB,GAAKxE,QAAQ2E,OAAOC,eAG3DvE,YAAYkE,MAAMvE,QAAQuE,QADX,IAEflE,YAAYoE,OAAOzE,QAAQyE,SAFZ,IAGflF,SAASsF,MACTvF,SAASwF,QAvCb3E,UAAY,IAAI4E,2BAAa,gCAAiCtB,qBAAqB,WAC3E7C,kBACAoE,SAASC,YAAY,UACtBrB,sBA/JClE,IAAMA,GAAGqD,YAAcrD,GAAGsD,MAC1BtD,GAAGuD,KAAK9C,UAAU+E,qBA+JrBC,YAAc,WACfhF,UAAUiF,OACV5F,KAAKgE,cAmCTxD,QAAQqD,OAAO,CACXgC,eAAe,EACfC,UAAU,EACVf,MAAO,OACPE,OAAQ,OACRc,WAAW,EACXC,SAAUnB,kBACVoB,KAAMpB,kBACNS,MAAO,WACHT,oBACA/E,SAASwF,SAEbY,QAAS,aACS,mBAElBC,OAAQ,WACJzF,UAAYwD,aAAMkC,YAAY5F,QAAS,UAAW,UAC1C,CAAC,YAAa,WAAY,SAC1B,CAACc,cACD,WACIxB,SAASwF,QACTtF,KAAKoC,iBAET,WAGIiC,UADa7D,QAAQO,KAAK,kBAAoB,GA7QtD,OAiRRoB,MAAO,WACHnC,KAAK8C,eACL9C,KAAK2F,eAETU,WAAY,WACR7F,QAAQuE,MAAMvE,QAAQ0E,SAASH,SAC/BvE,QAAQyE,OAAOzE,QAAQ0E,SAASD,SAAWzE,QAAQ2E,OAAOC,eAC1DP,oBACA9E,SAASsF,MACTvF,SAASwF,gBAGZgB,YAAc,SAASC,MACxB1F,YAAY2F,IAAI,YAAaD,KAAO,wBAEhCE,oBAAmB,SAAS1F,MAChCsD,SAAStD,KAAK2F,YAAYjC,kBAE9BjE,QAAQgG,IAAI,UAAW,OACvBhG,QAAQ0E,SAASsB,IAAI,UAAW,UAC3BjF,KAAO,WACRf,QAAQqD,OAAO,QACf/D,SAASwF,cAERlD,cAAgB,4BACTuE,IAAI,mCACZ7G,SAAS8G,QAAQC,aAAc,QAE9B/D,aAAe,4BACR6D,IAAI,kCACZ7G,SAAS8G,QAAQC,aAAc,QAE9BC,KAAOC,uBAEFC,QAAUC,aAAIC,YAAY,+BAC1BC,KAAO3B,SAAS4B,cAAc,QACpCD,KAAKE,IAAM,aACXF,KAAKG,KAAON,QAAU,YACtBxB,SAAS+B,KAAKC,YAAYL,YACpBM,4NAAqBT,QAAU,sSAAVA,QAAU,sEAAVA,QAAU,cAC/BU,+NAAwBV,QAAU,oTAAVA,QAAU,oFAAVA,QAAU,4BACxClH,SAAW,IAAI2H,MAAME,SAAU,CACnBC,WAAY,MAExB7H,SAAW,IAAI2H,SAASG,SACxB/H,SAASgI,UAAU/H,UACnBC,KAAK8C,eACLhD,SAASqD,QAAO,SAASpC,MACjBb,IAAMA,GAAGqD,YAAcrD,GAAGsD,MAC1BtD,GAAGuD,KAAK1C,SAGhBjB,SAASmG,KAAKpF,YAAY,IAC1Bd,SAASsF,MACTvF,SAASoC,cAER4E"}