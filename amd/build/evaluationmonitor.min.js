define("mod_vpl/evaluationmonitor",["exports","mod_vpl/vplui"],(function(_exports,_vplui){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.multievaluation=_exports.init=void 0;_exports.init=options=>{function showErrorMessage(message){_vplui.VPLUI.showErrorMessage(message,{next:options.next})}var action;options.next=function(){window.location=options.nexturl};var executionActions={ajaxurl:options.ajaxurl,run:showErrorMessage,getLastAction:function(){action()}};(action=function(){_vplui.VPLUI.requestAction("evaluate","evaluating",{},options.ajaxurl).done((function(response){_vplui.VPLUI.webSocketMonitor(response,"evaluate","evaluating",executionActions).done(options.next).fail(showErrorMessage)})).fail(showErrorMessage)})()};_exports.multievaluation=options=>{var baseurl=options.baseurl,goon=!0;function getGrade(result){return void 0===result||void 0===result.grade||null===result.grade?"â›”":"ðŸ‘‰ "+result.grade}async function evaluateStudent(id,subid){var ajaxurl=baseurl+id+"&action=";return new Promise(((resolve,reject)=>{var action,ok=()=>{resolve(!0)},cancel=()=>{VPL.updatesublist(subid,getGrade()),goon=!1,reject(!1)},showErrorMessage=function(message){_vplui.VPLUI.showErrorMessage(message,{closeOnEscape:!1,close:function(){VPL.unhlrow(subid)},stop:cancel,next:function(){VPL.updatesublist(subid,getGrade()),ok()}})},executionActions={ajaxurl:ajaxurl,run:showErrorMessage,setResult:function(result){VPL.updatesublist(subid,getGrade(result))},getLastAction:function(){action()}};(action=function(){VPL.hlrow(subid),_vplui.VPLUI.requestAction("evaluate","evaluating",{},ajaxurl).done((function(response){_vplui.VPLUI.webSocketMonitor(response,"evaluate","evaluating",executionActions).done(ok).fail(showErrorMessage)})).fail(showErrorMessage)})()}))}!async function(){for(var students=VPL.evaluateStudents,nstudents=students.length,i=0;i<nstudents;i++){var student=students[i];0===i&&VPL.hideTableRows(student.subid),VPL.getTableRow(student.subid).querySelector("td").innerHTML=i+1+"/"+nstudents,VPL.showTableRow(student.subid);try{await evaluateStudent(student.id,student.subid)}catch(e){if(VPL.unhlrow(student.subid),VPL.updatesublist(student.subid,getGrade()),!goon)break}}}()}}));

//# sourceMappingURL=evaluationmonitor.min.js.map