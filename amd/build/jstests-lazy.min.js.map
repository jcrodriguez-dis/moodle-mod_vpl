{"version":3,"file":"jstests-lazy.min.js","sources":["../src/jstests-lazy.js"],"sourcesContent":["// This file is part of VPL for Moodle - http://vpl.dis.ulpgc.es/\n//\n// VPL for Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// VPL for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with VPL for Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * VPL JavaScript test\n *\n * @copyright 2017 Juan Carlos Rodríguez-del-Pino\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author Juan Carlos Rodríguez-del-Pino <jcrodriguez@dis.ulpgc.es>\n */\n\nimport $ from 'jquery';\nimport {VPLUtil} from 'mod_vpl/vplutil';\n\nvar tests = [];\nvar result = [];\nvar testing = '';\nvar nAsserts = 0;\n\n/**\n * Show results of tests in page and window.console\n */\nfunction showResults() {\n    var stat = nAsserts + \" asserts tested\";\n    window.console.log(stat);\n    $('#test_results').append($('<p></p>').text(stat));\n    var message;\n    if (result.length == 0) {\n        message = 'Test passed';\n    } else {\n        message = result.length + ' errors found';\n    }\n    window.console.log(message);\n    $('#test_results').append($('<p></p>').text(message));\n    if (result.length > 0) {\n        var list = $('<ol></ol>');\n        for (var i = 0; i < result.length; i++) {\n            window.console.log((i + 1) + ': ' + result[i]);\n            var element = $('<li></li>');\n            element.text(result[i]);\n            list.append(element);\n        }\n        $('#test_results').append(list);\n    }\n}\n\n/**\n * Basic test assert\n * @param {boolean} b test result\n * @param {string} message Optional message\n */\nfunction assert(b, message) {\n    nAsserts++;\n    if (!b) {\n        if (typeof message == 'string') {\n            result.push(\"Error: \" + message + \" testing \" + testing);\n        }\n    }\n}\n\n/**\n * Basic test assert\n * @param {boolean} a Expected\n * @param {boolean} b Actual\n * @param {string} message Optional message\n */\nfunction assertEquals(a, b, message) {\n    nAsserts++;\n    if (a != b) {\n        if (typeof message == 'string') {\n            result.push(\"Error: \" + message + \" testing \" + testing + '. Expected \"' + a + '\" found \"' + b + '\"');\n        }\n    }\n}\n\ntests.push({\n    'name': \"VPLUtil\",\n    'test': function() {\n        assert(VPLUtil.returnTrue(), 'returnTrue');\n        assert(!VPLUtil.returnFalse(), 'returnFalse');\n        (function() {\n            var rawData = new ArrayBuffer(13);\n            assertEquals(13, rawData.byteLength, 'rawData.byteLength');\n            var bufferData = new Uint8Array(rawData);\n            for (var i = 0; i < bufferData.length; i++) {\n                bufferData[i] = Math.round(Math.random() * 255);\n            }\n            assertEquals(13, bufferData.length, 'bufferData.length');\n            var stringData = \"abcdeñhfjéÇ123143565387095609784\";\n            var rawResult = VPLUtil.String2ArrayBuffer(stringData);\n            var stringResult = VPLUtil.ArrayBuffer2String(rawResult);\n            assertEquals(stringData, stringResult, 'ArrayBuffer2String');\n            stringResult = VPLUtil.ArrayBuffer2String(rawData);\n            rawResult = VPLUtil.String2ArrayBuffer(stringResult);\n            var bufferResult = new Uint8Array(rawResult);\n            assertEquals(bufferData.length, bufferResult.length, 'String2ArrayBuffer');\n            if (bufferData.length == bufferResult.length) {\n                for (var j = 0; j < bufferData.length; j++) {\n                    assertEquals(bufferData[j], bufferResult[j], 'String2ArrayBuffer values');\n                }\n            }\n        })();\n        (function() {\n            assertEquals('c', VPLUtil.fileExtension('a.c'), 'fileExtension');\n            assertEquals('C', VPLUtil.fileExtension('a.c.C'), 'fileExtension');\n            assertEquals('hxx', VPLUtil.fileExtension('a.hxx'), 'fileExtension');\n            assertEquals('all', VPLUtil.fileExtension('.all'), 'fileExtension');\n        })();\n        (function() {\n            assert(!VPLUtil.isImage('a.c'), 'isImage');\n        })();\n        (function() {\n            assert(!VPLUtil.isBinary('a.c'), 'isBinary');\n        })();\n        (function() {\n            assert(!VPLUtil.isBlockly('a.c'), 'isBlockly');\n        })();\n        (function() {\n            assert(VPLUtil.validFileName('a.c'), 'validFileName');\n        })();\n    }\n});\n\ntests.push({\n    'name': \"VPLUtil langType\",\n    'test': function() {\n        var mapnames = VPLUtil.getLangNames();\n        for (var ext in mapnames) {\n            var filename;\n            if (ext == 'plain_text') {\n                continue;\n            }\n            if (ext.startsWith('.')) {\n                filename = ext.substring(1);\n            } else {\n                filename = 'filename.' + ext;\n            }\n            assert(VPLUtil.langType(filename) != 'plain_text', 'VPLUtil.langType');\n        }\n        assert(VPLUtil.langType('otra_cosa') == 'plain_text', 'VPLUtil.langType');\n    }\n});\n\n/**\n * Run tests in tests array\n */\nfunction runTests() {\n    for (var i = 0; i < tests.length; i++) {\n        try {\n            testing = tests[i].name;\n            tests[i].test();\n        } catch (e) {\n            result.push(\"Error: Exception \" + e.message + \" testing \" + testing + \"\\n\" + e.stack);\n        }\n    }\n}\n\nexport const start = () => {\n    runTests();\n    showResults();\n};\n"],"names":["tests","result","testing","nAsserts","assert","b","message","push","assertEquals","a","VPLUtil","returnTrue","returnFalse","rawData","ArrayBuffer","byteLength","bufferData","Uint8Array","i","length","Math","round","random","stringData","rawResult","String2ArrayBuffer","stringResult","ArrayBuffer2String","bufferResult","j","fileExtension","isImage","isBinary","isBlockly","validFileName","mapnames","getLangNames","ext","filename","startsWith","substring","langType","name","test","e","stack","runTests","stat","window","console","log","append","text","list","element","showResults"],"mappings":";;;;;;;+IA0BIA,MAAQ,GACRC,OAAS,GACTC,QAAU,GACVC,SAAW,WAkCNC,OAAOC,EAAGC,SACfH,WACKE,GACqB,iBAAXC,SACPL,OAAOM,KAAK,UAAYD,QAAU,YAAcJ,kBAWnDM,aAAaC,EAAGJ,EAAGC,SACxBH,WACIM,GAAKJ,GACiB,iBAAXC,SACPL,OAAOM,KAAK,UAAYD,QAAU,YAAcJ,QAAU,eAAiBO,EAAI,YAAcJ,EAAI,KAK7GL,MAAMO,KAAK,MACC,eACA,WACJH,OAAOM,iBAAQC,aAAc,cAC7BP,QAAQM,iBAAQE,cAAe,8BAEvBC,QAAU,IAAIC,YAAY,IAC9BN,aAAa,GAAIK,QAAQE,WAAY,8BACjCC,WAAa,IAAIC,WAAWJ,SACvBK,EAAI,EAAGA,EAAIF,WAAWG,OAAQD,IACnCF,WAAWE,GAAKE,KAAKC,MAAsB,IAAhBD,KAAKE,UAEpCd,aAAa,GAAIQ,WAAWG,OAAQ,yBAChCI,WAAa,mCACbC,UAAYd,iBAAQe,mBAAmBF,YACvCG,aAAehB,iBAAQiB,mBAAmBH,WAC9ChB,aAAae,WAAYG,aAAc,sBACvCA,aAAehB,iBAAQiB,mBAAmBd,SAC1CW,UAAYd,iBAAQe,mBAAmBC,kBACnCE,aAAe,IAAIX,WAAWO,cAClChB,aAAaQ,WAAWG,OAAQS,aAAaT,OAAQ,sBACjDH,WAAWG,QAAUS,aAAaT,WAC7B,IAAIU,EAAI,EAAGA,EAAIb,WAAWG,OAAQU,IACnCrB,aAAaQ,WAAWa,GAAID,aAAaC,GAAI,gCAKrDrB,aAAa,IAAKE,iBAAQoB,cAAc,OAAQ,iBAChDtB,aAAa,IAAKE,iBAAQoB,cAAc,SAAU,iBAClDtB,aAAa,MAAOE,iBAAQoB,cAAc,SAAU,iBACpDtB,aAAa,MAAOE,iBAAQoB,cAAc,QAAS,iBAGnD1B,QAAQM,iBAAQqB,QAAQ,OAAQ,WAGhC3B,QAAQM,iBAAQsB,SAAS,OAAQ,YAGjC5B,QAAQM,iBAAQuB,UAAU,OAAQ,aAGlC7B,OAAOM,iBAAQwB,cAAc,OAAQ,oBAKjDlC,MAAMO,KAAK,MACC,wBACA,eACA4B,SAAWzB,iBAAQ0B,mBAClB,IAAIC,OAAOF,SAAU,KAClBG,SACO,cAAPD,MAIAC,SADAD,IAAIE,WAAW,KACJF,IAAIG,UAAU,GAEd,YAAcH,IAE7BjC,OAAqC,cAA9BM,iBAAQ+B,SAASH,UAA2B,qBAEvDlC,OAAwC,cAAjCM,iBAAQ+B,SAAS,aAA8B,sCAkBzC,qBAVZ,IAAIvB,EAAI,EAAGA,EAAIlB,MAAMmB,OAAQD,QAE1BhB,QAAUF,MAAMkB,GAAGwB,KACnB1C,MAAMkB,GAAGyB,OACX,MAAOC,GACL3C,OAAOM,KAAK,oBAAsBqC,EAAEtC,QAAU,YAAcJ,QAAU,KAAO0C,EAAEC,QAMvFC,kBApIIxC,QAHAyC,KAAO5C,SAAW,qBACtB6C,OAAOC,QAAQC,IAAIH,0BACjB,iBAAiBI,QAAO,mBAAE,WAAWC,KAAKL,OAGxCzC,QADiB,GAAjBL,OAAOkB,OACG,cAEAlB,OAAOkB,OAAS,gBAE9B6B,OAAOC,QAAQC,IAAI5C,6BACjB,iBAAiB6C,QAAO,mBAAE,WAAWC,KAAK9C,UACxCL,OAAOkB,OAAS,EAAG,SACfkC,MAAO,mBAAE,aACJnC,EAAI,EAAGA,EAAIjB,OAAOkB,OAAQD,IAAK,CACpC8B,OAAOC,QAAQC,IAAKhC,EAAI,EAAK,KAAOjB,OAAOiB,QACvCoC,SAAU,mBAAE,aAChBA,QAAQF,KAAKnD,OAAOiB,IACpBmC,KAAKF,OAAOG,6BAEd,iBAAiBH,OAAOE,OAqH9BE"}